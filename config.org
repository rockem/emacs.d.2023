#+title: 2023 Emacs config
#+author: Eli Segal

* Package manager
** Local repository

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "local-lisp" user-emacs-directory))
#+end_src

** Setup package with repositories

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Setup use-package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Try
#+begin_src emacs-lisp
  (use-package try)
#+end_src

* Keymaps
** General

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-create-definer elis/leader-key
     :keymaps '(normal insert visual emacs)
     :prefix "SPC"
     :global-prefix "M-SPC"))
#+end_src

** Which key

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 1))
#+end_src

** Evil

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-disable-insert-state-bindings t)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+end_src

* Appearance
** General settings

#+begin_src emacs-lisp 
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)

  (if (not (eq system-type 'darwin))
    (menu-bar-mode -1))

  (setq visible-bell t)
  (setq use-dialog-box nil)
#+end_src

** Scrolling

#+begin_src emacs-lisp
  (pixel-scroll-mode t)
  (setq scroll-step 1 scroll-conservatively 10000)
  (setq scroll-margin 3)
#+end_src

** Fonts & Icons 

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka" :height 200 :weight 'normal)
  (use-package all-the-icons)
#+end_src

** Themes

#+begin_src emacs-lisp
  (use-package modus-themes
    :pin melpa
    :init
    ;; (setq modus-themes-paren-match)
    (setq modus-themes-vivendi-color-overrides
	  '((bg-main . "#1d20FF")))
    (setq
     modus-themes-common-palette-overrides '((bg-paren-match bg-blue-intense))
     modus-vivendi-tinted-palette-overrides '((bg-main "#2b2c3b"))
     modus-themes-org-blocks 'gray-background
     modus-themes-paren-match '(intense)
     modus-themes-italic-constructs t
     modus-themes-bold-constructs t)
    (setq modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)) 
    :config
    (load-theme 'modus-operandi-tinted :noconfirm))

  (use-package doom-themes
    :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled
      ;; (load-theme 'doom-oceanic-next t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)
      ;; or for treemacs users
      (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
      (doom-themes-treemacs-config)
      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))

  (elis/leader-key
   "t t" 'modus-themes-toggle :which-key "hello")
#+end_src

** Mode line

#+begin_src emacs-lisp
  (use-package doom-modeline
    :custom-face
    (mode-line ((t (:height 0.95))))
    (mode-line-inactive ((t (:height 0.95))))
    :config
    (setq doom-modeline-major-mode-icon nil)
    (setq doom-modeline-vcs-max-length 30)
    (doom-modeline-mode 1))
#+end_src

** Line numbers

#+begin_src emacs-lisp
  (column-number-mode)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)

  (dolist (mode '(term-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Auto completion
** Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))

  ;; Configure directory extension.
  (use-package vertico-directory
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
		("RET" . vertico-directory-enter)
		("DEL" . vertico-directory-delete-char)
		("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    :custom
    (marginolia-align 'right)
    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

** Orderless

#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Usefull general settings

#+begin_src emacs-lisp
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

** Completion icons

#+begin_src emacs-lisp
  ;; (use-package all-the-icons-completion
  ;;   :after (marginalia all-the-icons)
  ;;   :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  ;;   :init
  ;;   (all-the-icons-completion-mode))
#+end_src

** Consult

#+begin_src emacs-lisp
  (use-package consult
    )
#+end_src

* History

Save recent visited files list
#+begin_src emacs-lisp
  (recentf-mode 1)
#+end_src

Save history of mini buffer commands
#+begin_src emacs-lisp
  (setq history-length 25)
  (savehist-mode 1)
#+end_src

Save cusrsor last place for each visited file
#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

* Project
** Projectile

#+begin_src emacs-lisp
    (use-package projectile
      :config (projectile-mode)
      :init
      ;; Main leader key for projectile
      (elis/leader-key
       "p" '("Projectile" . projectile-command-map))
      ;; Whcih key alterations
      (push '((nil . "-") . (nil . " ")) which-key-replacement-alist)
      (push '((nil . "^projectile-") . (nil . "")) which-key-replacement-alist)
      (which-key-add-key-based-replacements
	"SPC p !" "shell command"
	"SPC p &" "async shell command"
	"SPC p ESC" "Most recent buffer") 
      ;; Main code directory
      (when (file-directory-p "~/Source")
	(setq projectile-project-search-path '("~/Source")))
      (setq projectile-switch-project-action #'projectile-dired))
#+end_src

* Help related
** Helpful

#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Org mode
** General

#+begin_src emacs-lisp
  (setq org-startup-folded t)
#+end_src

** Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Org roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/Documents/roam-notes")
    :config
    ;; Make tags show up in autocomplete 
    (setq org-roam-node-display-template
	(concat "${title:*} "
		(propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-setup)
    (org-roam-db-autosync-mode))
#+end_src

* Files
** General
Auto revert buffers with external changes
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-files-buffers t)
#+end_src
Disable default backup
#+begin_src emacs-lisp
  (setq auto-save-default nil)
#+end_src

** Auto save

#+begin_src emacs-lisp
  (use-package super-save
    :init
    (setq super-save-auto-save-when-idle t)
    :config
    (super-save-mode +1))
#+end_src

* Git
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* Langueges
** Tree sitter
#+begin_src emacs-lisp
      (use-package tree-sitter
	:config
	(global-tree-sitter-mode))
      (use-package tree-sitter-langs)
#+end_src
** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook
      '(lambda ()
        (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+end_src

** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src

