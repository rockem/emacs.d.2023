#+title: 2023 Emacs config
#+author: Eli Segal

* Package manager
** Setup package with repositories
  #+begin_src emacs-lisp

    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("melpa-stable" . "https://stable.melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

    (unless package-archive-contents
      (package-refresh-contents))

    (package-initialize)

  #+end_src
  
** Setup use-package
  #+begin_src emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))


    (require 'use-package)
    (setq use-package-always-ensure t)
  #+end_src
  
* Appearance
** General settings
  #+begin_src emacs-lisp 
    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)

    (menu-bar-mode -1)

    (setq visible-bell t)

  #+end_src
  
** Theme
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 170)

     (use-package all-the-icons)

     (use-package doom-themes
       :config
       ;; Global settings (defaults)
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	     doom-themes-enable-italic t) ; if nil, italics is universally disabled
       (load-theme 'doom-one t)

       ;; Enable flashing mode-line on errors
       (doom-themes-visual-bell-config)
       ;; or for treemacs users
       (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
       (doom-themes-treemacs-config)
       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config))

     (use-package doom-modeline
       :custom-face
       (mode-line ((t (:height 0.95))))
       (mode-line-inactive ((t (:height 0.95))))
       :config
       (doom-modeline-mode 1))
   #+end_src
** Line numbers
#+begin_src emacs-lisp
  (column-number-mode)
  (setq display-line-numbers 'relative)
  (global-display-line-numbers-mode relative)
#+end_src
* Auto completion
** Vertico
  #+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    ;; Configure directory extension.
    (use-package vertico-directory
      :after vertico
      :ensure nil
      ;; More convenient directory navigation commands
      :bind (:map vertico-map
		  ("RET" . vertico-directory-enter)
		  ("DEL" . vertico-directory-delete-char)
		  ("M-DEL" . vertico-directory-delete-word))
      ;; Tidy shadowed file names
      :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
   #+end_src

** Orderless
  #+begin_src emacs-lisp
    (use-package orderless
      :init
      ;; Configure a custom style dispatcher (see the Consult wiki)
      ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
      ;;       orderless-component-separator #'orderless-escapable-split-on-space)
      (setq completion-styles '(orderless basic)
	    completion-category-defaults nil
	    completion-category-overrides '((file (styles partial-completion)))))
  #+end_src

  ** Usefull general settings
  #+begin_src emacs-lisp
    (use-package emacs
	  :init
      ;; Add prompt indicator to `completing-read-multiple'.
      ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
      (defun crm-indicator (args)
	(cons (format "[CRM%s] %s"
		      (replace-regexp-in-string
		       "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		       crm-separator)
		      (car args))
	      (cdr args)))
      (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

      ;; Do not allow the cursor in the minibuffer prompt
      (setq minibuffer-prompt-properties
	    '(read-only t cursor-intangible t face minibuffer-prompt))
      (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

      ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
      ;; Vertico commands are hidden in normal buffers.
      ;; (setq read-extended-command-predicate
      ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
      (setq enable-recursive-minibuffers t))
  #+end_src

* History
  #+begin_src emacs-lisp
    (use-package savehist
      :init
      (savehist-mode))
  #+end_src

  
